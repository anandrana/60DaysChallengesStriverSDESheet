import java.util.* ;
import java.io.*; 
public class Solution {
    public static int merge(long[] arr,int l,int m,int r){
        // Left subarray
        long[] left = Arrays.copyOfRange(arr, l, m + 1);
 
        // Right subarray
       long[] right = Arrays.copyOfRange(arr, m + 1, r + 1);
 
        int i = 0, j = 0, k = l, swaps = 0;
 
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j])
                arr[k++] = left[i++];
            else {
                arr[k++] = right[j++];
                swaps += (m + 1) - (l + i);
            }
        }
        while (i < left.length)
            arr[k++] = left[i++];
        while (j < right.length)
            arr[k++] = right[j++];
        return swaps;
    }
    public static long mergeSort(long[] arr,int l,int r){
        long inverCount=0;
        if(l<r){
            int mid=(l+r)/2;
            inverCount+=mergeSort(arr,l,mid);
            inverCount+=mergeSort(arr,mid+1,r);
            inverCount+=merge(arr,l,mid,r);
            
        }
        return inverCount;
    }
    public static long getInversions(long arr[], int n) {
        // Write your code here.
        return mergeSort(arr,0,n-1);
    }
}
