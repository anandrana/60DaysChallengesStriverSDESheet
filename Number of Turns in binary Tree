#User function Template for python3

'''
class Node:
    def __init__(self,val):
        self.data=val
        self.left=None
        self.right=None
'''

class Solution:
    def NumberOFTurns(self, root, first, second):
        #return the number of turns required to go from first node to second node
        
        def countTurn(node,data,turn):
            global count
            
            if(node==None):
                return False
            
            if(node.data==data):
                return True
                
            if(turn==True):
                if countTurn(node.left,data,turn):
                    return True
                if countTurn(node.right,data,not turn):
                    count+=1
                    return True
            else:
                if countTurn(node.right,data,turn):
                    return True
                if countTurn(node.left,data,not turn):
                    count+=1
                    return True
            
            return False
            
            
        def lca(root,first,second):
            if(root==None):
                return None
            
            if(root.data==first or root.data==second):
                return root
            
            left=lca(root.left,first,second)
            right=lca(root.right,first,second)
            
            if(left!=None and right!=None):
                return root
            if(left==None):
                return right
            
            if(right==None):
                return left
            
        
        global count   
        LCA=lca(root,first,second)
        
        if LCA is None:
            return -1
        
        count=0
        #case 1 when LCA is not equal to first and second
        if(LCA.data != first and LCA.data!=second):
            
            if countTurn(LCA.right,first,False) or countTurn(LCA.left,first,True):
                pass
            
            
            if countTurn(LCA.right,second,False) or countTurn(LCA.left,second,True):
                pass
            
            return count+1
        
        if LCA.data==first:
            
            countTurn(LCA.right,second,False)
            countTurn(LCA.left,second,True)
            return count
        else:
            countTurn(LCA.right,first,False)
            countTurn(LCA.left,first,True)
            return count
            
            
        


#{ 
 # Driver Code Starts
#Initial Template for Python 3

from collections import deque
# Tree Node
class Node:
    def __init__(self, val):
        self.right = None
        self.data = val
        self.left = None

# Function to Build Tree  
def buildTree(s):
    #Corner Case
    if(len(s)==0 or s[0]=="N"):           
        return None
        
    # Creating list of strings from input 
    # string after spliting by space
    ip=list(map(str,s.split()))
    
    # Create the root of the tree
    root=Node(int(ip[0]))                     
    size=0
    q=deque()
    
    # Push the root to the queue
    q.append(root)                            
    size=size+1 
    
    # Starting from the second element
    i=1                                       
    while(size>0 and i<len(ip)):
        # Get and remove the front of the queue
        currNode=q[0]
        q.popleft()
        size=size-1
        
        # Get the current node's value from the string
        currVal=ip[i]
        
        # If the left child is not null
        if(currVal!="N"):
            
            # Create the left child for the current node
            currNode.left=Node(int(currVal))
            
            # Push it to the queue
            q.append(currNode.left)
            size=size+1
        # For the right child
        i=i+1
        if(i>=len(ip)):
            break
        currVal=ip[i]
        
        # If the right child is not null
        if(currVal!="N"):
            
            # Create the right child for the current node
            currNode.right=Node(int(currVal))
            
            # Push it to the queue
            q.append(currNode.right)
            size=size+1
        i=i+1
    return root



if __name__=="__main__":
    t=int(input())
    for _ in range(0,t):
        s=input()
        root=buildTree(s)
        n1,n2=list(map(int, input().strip().split())) 
        ob = Solution()
        turn = ob.NumberOFTurns(root,n1,n2)
        if turn!=0:
            print(turn)
        else:
            print(-1)
# } Driver Code Ends
